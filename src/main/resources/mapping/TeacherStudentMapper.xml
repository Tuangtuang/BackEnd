<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.demo.dao.TeacherStudentMapper" >
  <resultMap id="BaseResultMap" type="com.example.demo.model.entity.TeacherStudent" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="teacher_id" property="teacherId" jdbcType="INTEGER" />
    <result column="stu_id" property="stuId" jdbcType="INTEGER" />
    <result column="state" property="state" jdbcType="INTEGER" />
    <result column="other" property="other" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, teacher_id, stu_id, state, other
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.example.demo.model.entity.TeacherStudentExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from tbl_teacher_student
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from tbl_teacher_student
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from tbl_teacher_student
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.demo.model.entity.TeacherStudentExample" >
    delete from tbl_teacher_student
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.demo.model.entity.TeacherStudent" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
    insert into tbl_teacher_student (id, teacher_id, stu_id, 
      state, other)
    values (#{id,jdbcType=INTEGER}, #{teacherId,jdbcType=INTEGER}, #{stuId,jdbcType=INTEGER}, 
      #{state,jdbcType=INTEGER}, #{other,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo.model.entity.TeacherStudent" >
    insert into tbl_teacher_student
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="teacherId != null" >
        teacher_id,
      </if>
      <if test="stuId != null" >
        stu_id,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="other != null" >
        other,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="teacherId != null" >
        #{teacherId,jdbcType=INTEGER},
      </if>
      <if test="stuId != null" >
        #{stuId,jdbcType=INTEGER},
      </if>
      <if test="state != null" >
        #{state,jdbcType=INTEGER},
      </if>
      <if test="other != null" >
        #{other,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.demo.model.entity.TeacherStudentExample" resultType="java.lang.Integer" >
    select count(*) from tbl_teacher_student
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update tbl_teacher_student
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.teacherId != null" >
        teacher_id = #{record.teacherId,jdbcType=INTEGER},
      </if>
      <if test="record.stuId != null" >
        stu_id = #{record.stuId,jdbcType=INTEGER},
      </if>
      <if test="record.state != null" >
        state = #{record.state,jdbcType=INTEGER},
      </if>
      <if test="record.other != null" >
        other = #{record.other,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update tbl_teacher_student
    set id = #{record.id,jdbcType=INTEGER},
      teacher_id = #{record.teacherId,jdbcType=INTEGER},
      stu_id = #{record.stuId,jdbcType=INTEGER},
      state = #{record.state,jdbcType=INTEGER},
      other = #{record.other,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.demo.model.entity.TeacherStudent" >
    update tbl_teacher_student
    <set >
      <if test="teacherId != null" >
        teacher_id = #{teacherId,jdbcType=INTEGER},
      </if>
      <if test="stuId != null" >
        stu_id = #{stuId,jdbcType=INTEGER},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="other != null" >
        other = #{other,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.demo.model.entity.TeacherStudent" >
    update tbl_teacher_student
    set teacher_id = #{teacherId,jdbcType=INTEGER},
      stu_id = #{stuId,jdbcType=INTEGER},
      state = #{state,jdbcType=INTEGER},
      other = #{other,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="getStudentList" parameterType="java.lang.Integer" resultType="com.example.demo.model.databaseResponse.MyStudentInfo">
    select tbl_student.id as id,tbl_student.name as name,tbl_student.school as school,tbl_student.grade as grade
    from tbl_teacher_student inner join tbl_student on tbl_teacher_student.stu_id=tbl_student.id
    where tbl_teacher_student.teacher_id=#{0}
    order by tbl_student.id
  </select>


  <select id="searchTeacherStudentName"  resultType="com.example.demo.model.databaseResponse.TeacherStudentName">
    select distinct tbl_teacher_student.stu_id as stuId,tbl_student.name as studentName,case when tbl_student.id=tbl_teacher_student.stu_id then 1 else 0 end as tag
    from tbl_teacher_student inner join tbl_student on tbl_teacher_student.stu_id=tbl_student.id
    where tbl_student.name=#{studentName} and tbl_teacher_student.teacher_id=#{teacherId}
  </select>


  <select id="getRelationship" parameterType="java.lang.Integer" resultType="com.example.demo.model.databaseResponse.TeacherStudentNameInfo">
    select tbl_student.id as studentId,tbl_student.name as studentName
    from tbl_student inner  join tbl_teacher_student on tbl_student.id=tbl_teacher_student.stu_id
    where teacher_id=#{0} and state=0
    order by tbl_student.id
  </select>


  <select id="getRelationshipByStudent" parameterType="java.lang.Integer" resultType="com.example.demo.model.databaseResponse.TeacherStudentTeacherNameInfo">
    select tbl_teacher.id as teacherId,tbl_teacher.name as teacherName
    from tbl_teacher inner join tbl_teacher_student on tbl_teacher_student.teacher_id=tbl_teacher.id
    where stu_id=#{0} and state=0
    order by tbl_teacher.id
  </select>


  <select id="teacherSearchStudentById" resultType="com.example.demo.model.databaseResponse.SearchStudentByTeacher" >
    select tbl_student.id as studentId,tbl_student.name as studentName,tbl_student.grade as grade,tbl_student.school as school
    from tbl_student inner  join  tbl_teacher_student on tbl_teacher_student.stu_id=tbl_student.id
    where tbl_teacher_student.teacher_id=#{teacherId} and tbl_teacher_student.stu_id=#{studentId}
  </select>


  <select id="teacherSearchByName" resultType="com.example.demo.model.databaseResponse.SearchStudentByTeacher">
    select tbl_student.id as studentId,tbl_student.name as studentName,tbl_student.grade as grade,tbl_student.school as school
    from tbl_student inner  join  tbl_teacher_student on tbl_teacher_student.stu_id=tbl_student.id
    where tbl_teacher_student.teacher_id=#{teacherId} and tbl_student.name=#{studentName}
  </select>


  <select id="getAllByTeacher" resultType="com.example.demo.model.databaseResponse.SearchStudentByTeacher" parameterType="java.lang.Integer">
    select tbl_student.id as studentId,tbl_student.name as studentName,tbl_student.grade as grade,tbl_student.school as school
    from tbl_student inner  join  tbl_teacher_student on tbl_teacher_student.stu_id=tbl_student.id
    where tbl_teacher_student.teacher_id=#{0}
  </select>
</mapper>